buildscript {
    repositories.gradlePluginPortal()
    dependencies.classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.1"
}

apply plugin: 'java-library'
apply from: 'gradle/vars.gradle'

tasks.findByName('wrapper')?.configure {
    gradleVersion = '5.2'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

var cmdr = project

version '0.0.1'

// stdio implementations
project('stdio') {
    apply plugin: 'java-library'
    apply plugin: 'application'
    version '0.0.1'

    mainClassName = 'org.comroid.cmdr.stdio.IOCmdr'

    dependencies {
        runtimeOnly 'com.google.flogger:flogger-system-backend:0.7.4'
    }
}

// spigot implementations
project('spigot') {
    apply plugin: 'java-library'
    version '0.0.1'

    sourceCompatibility = 17
    targetCompatibility = 17

    dependencies {
        compileOnly "org.spigotmc:spigot-api:$mcVersion-$spigotRC-SNAPSHOT"
        runtimeOnly 'com.google.flogger:flogger-log4j2-backend:0.7.4'
    }
}

// discord implementations
project('catnip') {
    apply plugin: 'java-library'
    version '0.0.0'

    dependencies {
        compileOnly 'com.mewna:catnip:3.3.+'
        runtimeOnly 'com.fasterxml.jackson.core:jackson-databind:2.10.0.pr2'
        runtimeOnly 'com.squareup.okhttp3:okhttp:3.14.3'
        runtimeOnly 'com.google.flogger:flogger-slf4j-backend:0.7.4'
    }
}
project('discord4j') {
    apply plugin: 'java-library'
    version '0.0.0'

    dependencies {
        //compileOnly 'com.discord4j:discord4j-core:3.2.+'
        runtimeOnly 'com.fasterxml.jackson.core:jackson-databind:2.10.0.pr2'
        runtimeOnly 'com.google.flogger:flogger-slf4j-backend:0.7.4'
    }
}
project('javacord') {
    apply plugin: 'java-library'
    version '0.0.0'

    dependencies {
        compileOnly 'org.javacord:javacord-api:3.5.+'
        compileOnly 'org.javacord:javacord-core:3.0.4'
        compileOnly 'org.apache.logging.log4j:log4j-api:2.12.1'
        runtimeOnly 'com.fasterxml.jackson.core:jackson-databind:2.10.0.pr2'
        runtimeOnly 'com.squareup.okhttp3:okhttp:3.14.3'
        runtimeOnly 'com.google.flogger:flogger-log4j2-backend:0.7.4'
    }
}
project('jda') {
    apply plugin: 'java-library'
    version '0.0.0'

    dependencies {
        compileOnly 'net.dv8tion:JDA:5.0.+'
        runtimeOnly 'org.json:json:20190722'
        runtimeOnly 'com.squareup.okhttp3:okhttp:3.14.3'
        runtimeOnly 'com.google.flogger:flogger-slf4j-backend:0.7.4'
    }
}

allprojects {
    group 'org.comroid'

    if (project.name != 'cmdr')
        artifactName = 'cmdr-' + project.name

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar) {
        //javadoc
        from javadoc.destinationDir
        archiveClassifier = "javadoc"
    }

    compileJava.options.encoding = 'UTF-8'

    sourceSets {
        main.java.srcDirs = files("$cmdr.projectDir/src/$project.name/main/java")
        main.resources.srcDirs = files("$cmdr.projectDir/src/$project.name/main/resources")
        test.java.srcDirs = files("$cmdr.projectDir/src/$project.name/test/java")
        test.resources.srcDirs = files("$cmdr.projectDir/src/$project.name/test/java")
    }

    repositories {
        maven { url 'https://maven.comroid.org' }
        mavenLocal()
        maven { url 'https://www.jitpack.io' }
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        jcenter()
    }

    dependencies {
        if (project.name != 'cmdr')
            api parent

        if (isAutoDeploy) {
            api 'org.comroid:uniform:0.+'
        } else {
            api project(':guardian:uniform')
        }

        compileOnly 'org.jetbrains:annotations:21.+'
        implementation 'com.google.flogger:flogger:0.5.1'

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.easymock:easymock:4.0.2'

        testCompileOnly 'org.codehaus.groovy:groovy:3.0.0-beta-3'
    }

    apply from: "$cmdr.projectDir/gradle/publishing.gradle"
}
